访问权限控制：
    重构：重写代码，以使得它变更可读、更易理解，并因此而更具有可维护性。
    问题引出：消费者（或者说是客户端程序员）需要我们的代码在某些方面保持不变。但是我们又想重构代码，怎么区分客户端程序员想要的和我们
    想要的。

编译单元：一个Java的源文件（转译单元）。一个编译单元必须有一个后缀名.java，而在编译单元内则可以有一个public类，该类的名称必须与文件
    的名称相同（包括大小写，但是不包括后缀）。但是每个编译单元必须只能有一个public类，否则编译器就不会接受。如果在该编译单元之中还有
    其他额外的类的话，那么在包之外的世界是无法看见这些类的，因为它们不是public类，而且它们主要是为public类提供支持。

编译一个Java源文件之后，Java文件中每个Java类都会有一个输出文件，而该文件的文件名称和.java文件中的每个类的名称相同，只是后面多了一个
.class。编译少量的Java文件后会得到大量的.class文件。

package 关键字必须是在Java源文件的第一行（除了注释）

java 解释器的运行过程：1 首先，找出CLASSPATH，CLASSPATH包含一个或者多个目录，用作查找.class文件的目录。
    2 从根目录开始，解释器获取包的名称并将每个 句点 替换成反斜杠，以从CLASSPATH跟中产生一个路径名称。
    3 得到的路径会与CLASSPATH中的各个不同项相连接，解释器就在这些目录中查找与你索要创建的类名称相关的.class文件。

=========== 注意 ==========
class类不能创建为private或者protected（内部类不算在这个范畴），仅有两个选择，包访问权限和public。
可以使用private来指定类的构造器就只能自己访问，但是可以使用static成员进行创建类

==========================

使用权限控制的原因：第一：为了使用户不要碰触那些他们不该碰触的地方。这些地方对于类内部的操作是必要的，但是它并不属于客户端程序员所需接口的一部分。
第二：为了使类库的设计者可以更改类的内部工作方式，而不必担心这样会对客户端程序员产生重大的影响。